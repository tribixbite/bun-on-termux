#!/data/data/com.termux/files/usr/bin/bash
# Enhanced Bun wrapper for Termux - handles directory reading and environment variables
# bunfig.toml IS read and respected for local installs (backend=copyfile works)

# Note: grun doesn't pass environment variables to processes by default
# This is a known limitation of glibc-runner v2.0-3
# Workaround: Applications need to use config files or alternative env methods

# Handle package.json script execution (bun run fails with directory reading)
if [ "$1" = "run" ] && [ -f "package.json" ] && [ -n "$2" ]; then
    script_command=$(grep -o "\"$2\":[[:space:]]*\"[^\"]*\"" package.json 2>/dev/null | sed 's/.*: *"\([^"]*\)".*/\1/')
    if [ -n "$script_command" ]; then
        # Replace 'bun run' with direct execution in script commands
        if echo "$script_command" | grep -q "bun run "; then
            script_file=$(echo "$script_command" | sed 's/bun run //')
            shift 2  # Remove "run" and script name
            exec grun ~/.bun/bin/buno "$script_file" "$@"
        else
            # Execute script directly (like "./build.sh")
            shift  # Remove "run"  
            exec $script_command "$@"
        fi
    fi
fi

# Handle bunx/bun x commands (package execution with auto-install)
# bunx and "bun x" both need special handling for directory issues
if [ "$1" = "x" ]; then
    shift  # Remove "x" argument
    # For bunx commands, we need to work around directory reading issues
    # by changing to a safe directory and using absolute paths when needed
    if [ -n "$1" ]; then
        # Change to /tmp to avoid directory reading issues, then run the command
        mkdir -p ~/.bun/tmp
        cd ~/.bun/tmp   2>/dev/null || cd /
        exec grun ~/.bun/bin/buno x "$@"
    else
        # No package specified, show help
        exec grun ~/.bun/bin/buno x --help
    fi
fi

# Handle global installs - bunfig.toml backend setting is ignored for global installs by Bun design
# Must explicitly pass --backend=copyfile for Termux compatibility
if [ "$1" = "install" ] || [ "$1" = "i" ] || [ "$1" = "add" ]; then
    # Check if -g or --global flag is present
    for arg in "$@"; do
        if [ "$arg" = "-g" ] || [ "$arg" = "--global" ]; then
            # Check if --backend is already specified
            backend_specified=false
            for check_arg in "$@"; do
                if echo "$check_arg" | grep -q "^--backend="; then
                    backend_specified=true
                    break
                fi
            done
            
            # Add --backend=copyfile if not already specified
            if [ "$backend_specified" = false ]; then
                exec grun ~/.bun/bin/buno "$@" --backend=copyfile
            fi
            break
        fi
    done
fi

# For everything else, just use grun with working binary
# bunfig.toml with backend=copyfile is read and respected for local installs
# Note: Environment variables are not passed through grun - this is a limitation
exec grun ~/.bun/bin/buno "$@"
